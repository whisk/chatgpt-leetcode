Hi, this is a coding interview. I will give you a problem statement and expect that you explain the idea of the most efficient solution. You should estimate time and memory complexity using the big O notation. You don't need to write code yet. Feel free to ask clarifying questions. Here is the problem statement:
You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.

In one operation you can choose any subarray from initial and increment each value by one.

Return the minimum number of operations to form a target array from initial.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the target array from the initial array.
[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).
[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).
[1,2,2,2,1] increment 1 at index 2.
[1,2,3,2,1] target array is formed.
Example 2:

Input: target = [3,1,1,2]
Output: 4
Explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2]
Example 3:

Input: target = [3,1,5,4,2]
Output: 7
Explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2].
 

Constraints:

1 <= target.length <= 10^5
1 <= target[i] <= 10^5

--
To solve this problem efficiently, we can use a greedy approach. We will iterate through the target array and count the number of continuous increasing or decreasing subarrays. This can be done in linear time with a single pass through the array.

Here's the high-level algorithm:

1. Initialize the operation count to 0.
2. Iterate through the target array from index 1 to the end:
   a. If target[i] is greater than target[i-1], it means we have a continuous increasing subarray. We need one more operation for this increment.
   b. If target[i] is less than target[i-1], it means we have a continuous decreasing subarray. We need one more operation for this decrement.
   c. If target[i] is equal to target[i-1], it means we have a flat subarray, and we don't need additional operations for this part.
3. Increment the operation count by target[0] since we need to perform that many operations for the first element to reach its target value.
4. Return the operation count.

The time complexity of this algorithm is O(n) since we iterate through the target array once, where n is the length of the target array. The space complexity is O(1) because we only use a constant amount of additional space to store the operation count.

This algorithm is efficient and optimal because it minimizes the number of operations by incrementing or decrementing the continuous increasing or decreasing subarrays in the target array.
--
Please write a working code for this problem in Python. I will give you an empty function declaration, and you should expand it with your code. Please remember, that you should not change function definition. Here is the function declaration:
def minNumberOperations(self, target: List[int]) -> int:

--
Here's the code for the function based on the greedy approach described earlier:

```python
from typing import List

class Solution:
    def minNumberOperations(self, target: List[int]) -> int:
        operations = 0
        
        for i in range(1, len(target)):
            if target[i] > target[i - 1]:
                operations += target[i] - target[i - 1]
        
        operations += target[0]
        
        return operations
```

You can use this function within the Solution class to solve the problem. The function takes a list of integers called "target" and returns the minimum number of operations needed to form the target array from an initial array of the same size with all elements set to zeros.
